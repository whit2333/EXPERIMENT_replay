#!/bin/bash
#set -u 

function print_the_help {
  echo "USAGE: $0 -r <run_number> -n <num> "
  echo "  OPTIONS: "
  echo "            -r,--run           Required run number"
  echo "            -n,--n-events        Required number of eventsrun number"
  #echo "            -o,--online-only   Log online only"
  #echo "            -a,--all           Log all plots (online, detectors, physics)"
  #echo "            -n,--no-log        Do not submit any log entries"
  #echo "            -y,--yes           Automatically submit log entries (does not prompt for y/n)"
  exit 
}

function yes_or_no {
  while true; do
    read -p "$* [y/n]: " yn
    case $yn in
      [Yy]*) return 0 ;;
      [Nn]*) echo "No entered" ; return 1 ;;
    esac
  done
}

run_number=
n_events=
container=

if [[ $# -eq 0 ]] ; then
  print_the_help
  exit 
fi

POSITIONAL=()
while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -h|--help)
      shift # past argument
      print_the_help
      ;;
    -r|--run)
      run_number="$2"
      shift # past argument
      shift # past value
      ;;
    -n|--n-events)
      n_events="$2"
      shift # past argument
      shift # past value
      ;;
    -c|--container)
      container=1
      #shift # past argument
      shift # past value
      ;;
    #-a|--all)
    #  LOG_ALL_PLOTS=1
    #  shift # past argument
    #  #shift # past value
    #  ;;
    #-o|--online-only)
    #  ONLINE_ONLY=1
    #  shift # past argument
    #  #shift # past value
    #  ;;
    *)    # unknown option
      #POSITIONAL+=("$1") # save it in an array for later
      echo "unknown option"
      print_the_help
      shift # past argument
      ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [[ -z ${n_events} ]] ; then
  echo  " need argument -n <num> "
fi
if [[ -z ${run_number} ]] ; then
  echo  " need argument -r <run> "
fi



#if [[ $# -eq 0 ]] ; then
#  print_the_help
#  exit 
#fi

export ROOT_INCLUDE_PATH=/opt/software/local/include:$HOME/include
export DB_DIR=DBASE

#run_number=3566
#run_number=3372
#run_number=3961
#config="hallc_replay/CONFIG/${SPEC}/PRODUCTION/${spec}_coin_production.cfg"
#script="analysis/coin_replay.cxx"

#singularity run -a hcana $(hallc_config -d)/cool_halls.simg "SCRIPTS/COIN/PRODUCTION/replay_production_coin_hElec_pProt.C(${run_number},${n_events})"
if [[ -n ${container} ]] ; then
  singularity run -a hcana $(hallc_config -d)/cool_halls.simg -b -q "analysis/replay_shms.cxx(${run_number},${n_events})"
else 
  hcana -b -q "analysis/replay_shms.cxx(${run_number},${n_events})"
fi

#hcana -b -q "analysis/replay_coin.cxx(${run_number},${n_events})"

